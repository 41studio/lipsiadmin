var selections = new Ext.grid.CheckboxSelectionModel();
var proxy = new Ext.ux.data.PagingMemoryProxy();

var items = [
	{	name: 'id' },
	{ name: 'email' },
	{ name: 'active'},
	{ name: 'created_at', type: 'date', dateFormat: 'c' }
]

var js = new Ext.data.JsonStore({
	url: '/admin/accounts.json',                                       
	root: 'accounts',
	id: 'id',                                            
	fields: items
});
		 
var ds = new Ext.data.Store({
	proxy: proxy,
	reader: js.reader,
	remoteSort: true
});

ds.setDefaultSort('created_at', 'desc');

var grid = new Ext.grid.GridPanel({
	store: ds,
	viewConfig: { forceFit: true },
	clicksToEdit: 'auto',
	enableColumnHide:false,
	enableColumnMove:false,
	border:false,
	bodyBorder:false,
	cls:'grid',
	title: Lipsiadmin.locale.labels.all + 'Accounts',
	iconCls:'icon-no-group',
	region:'center',
	sm: selections,
	columns: [
		selections,
		{
			header: 'Id', 
			width: 15, 
			sortable: true, 
			dataIndex: 'id'
		},{ 
			header: 'Email', 
			sortable: true, 
			dataIndex: 'email'
		},{ 
			header: 'Active', 
			width: 30,
			align: 'center',
			sortable: true, 
			dataIndex: 'active',
			renderer: Ext.util.Format.boolRenderer
		},{
			header: 'Created At', 
			width: 50,
			align:'center', 
			sortable: true, 
			dataIndex: 'created_at',
			renderer: Ext.util.Format.dateRenderer(Lipsiadmin.locale.dateFormat)
		}	    
	],
	tbar: [
		{
			id:'add',
			text: Lipsiadmin.locale.buttons.add,
			disabled:false,
			cls: 'x-btn-text-icon add',
			handler:add
		},'-',{
			id:'edit',
			text: Lipsiadmin.locale.buttons.edit,
			disabled:true,
			cls: 'x-btn-text-icon edit',
			handler:edit
		},'-',{
			id:'remove',
			text:Lipsiadmin.locale.buttons.remove,
			disabled:true,
			cls:'x-btn-text-icon remove',
			handler:remove
		},'->',
			 Lipsiadmin.locale.labels.search, ' ',
			 new Ext.app.SearchField({
				pageSize: 50,
				store: ds,
				items: items,
				width: 320
			})
	],
	bbar: new Ext.PagingToolbar({
		pageSize: 50,
		store: ds,
		displayInfo: true
	})
});

selections.on('selectionchange', function(){
	var n = selections.getSelected();
	var btns = grid.getTopToolbar().items.map;

   if(!n){
   	btns.remove.disable();
		btns.edit.disable();
     return;
	} else {
		btns.remove.enable();
		btns.edit.enable();
		return;
   }
});

grid.getBottomToolbar().on('render', function(){ 	grid.getBottomToolbar().loading.hide(); });

function add(){
	Lipsiadmin.app.loadMenu('/admin/accounts/new');
}

function edit(){
	Lipsiadmin.app.loadMenu('/admin/accounts/'+selections.getSelected().id+'/edit');
}

function remove(){
	Ext.Msg.confirm(Lipsiadmin.locale.confirm.title, Lipsiadmin.locale.confirm.msg_1 + selections.getCount() + Lipsiadmin.locale.confirm.msg_2, function(btn, text){
		if (btn == 'yes'){
			selections.each(function(r){
				Lipsiadmin.app.mask();
				Ext.Ajax.request({
					url: '/admin/accounts/'+r.id,
					method: 'DELETE',
					params: {<%= request_forgery_protection_token %>: '<%= form_authenticity_token %>'},
					success: function(result, request){
						Lipsiadmin.app.unmask();
						var resultValue = Ext.decode(result.responseText); 
						if (resultValue.success == true){
							ds.remove(r);
						} else { 
				    	Ext.MessageBox.alert(Lipsiadmin.locale.alert.title, resultValue.msg);
							return;
						}
					},								
					failure: function(result, request) {
						Lipsiadmin.app.unmask();
						Ext.Msg.alert(Lipsiadmin.locale.alert.title, Lipsiadmin.locale.alert.msg);
					}
				});
			})
		}
	});
}

function loadData(){ 
	proxy.reload(js.reader.jsonData);
	ds.load();
	Lipsiadmin.app.unmask();
}

js.on('load', loadData);
Lipsiadmin.app.addItem(grid);
Lipsiadmin.app.mask();
js.load();